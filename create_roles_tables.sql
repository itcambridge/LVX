-- Create roles table
CREATE TABLE IF NOT EXISTS project_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    time_commitment TEXT,
    location TEXT,
    applicants INTEGER NOT NULL DEFAULT 0,
    filled BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- Create role_skills table to track skills needed for each role
CREATE TABLE IF NOT EXISTS role_skills (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id BIGINT NOT NULL REFERENCES project_roles(id) ON DELETE CASCADE,
    skill TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create role_applications table to track applications for roles
CREATE TABLE IF NOT EXISTS role_applications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id BIGINT NOT NULL REFERENCES project_roles(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    message TEXT,
    status TEXT NOT NULL DEFAULT 'pending', -- pending, accepted, rejected
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    
    -- Ensure a user can only apply once for a role
    CONSTRAINT role_applications_unique UNIQUE (role_id, user_id)
);

-- Create indexes for faster lookups
CREATE INDEX IF NOT EXISTS project_roles_project_id_idx ON project_roles (project_id);
CREATE INDEX IF NOT EXISTS role_skills_role_id_idx ON role_skills (role_id);
CREATE INDEX IF NOT EXISTS role_applications_role_id_idx ON role_applications (role_id);
CREATE INDEX IF NOT EXISTS role_applications_user_id_idx ON role_applications (user_id);

-- Create or replace function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_project_roles_updated_at
BEFORE UPDATE ON project_roles
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_role_applications_updated_at
BEFORE UPDATE ON role_applications
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Create RLS policies for project_roles table
ALTER TABLE project_roles ENABLE ROW LEVEL SECURITY;

-- Policy for selecting roles (anyone can read)
CREATE POLICY "Anyone can read project roles"
ON project_roles FOR SELECT
USING (true);

-- Policy for inserting roles (project creators only)
CREATE POLICY "Project creators can insert roles"
ON project_roles FOR INSERT
TO authenticated
WITH CHECK (
    EXISTS (
        SELECT 1 FROM projects
        WHERE projects.id = project_id
        AND projects.creator_id = auth.uid()
    )
);

-- Policy for updating roles (project creators only)
CREATE POLICY "Project creators can update roles"
ON project_roles FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM projects
        WHERE projects.id = project_id
        AND projects.creator_id = auth.uid()
    )
);

-- Policy for deleting roles (project creators only)
CREATE POLICY "Project creators can delete roles"
ON project_roles FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM projects
        WHERE projects.id = project_id
        AND projects.creator_id = auth.uid()
    )
);

-- Create RLS policies for role_skills table
ALTER TABLE role_skills ENABLE ROW LEVEL SECURITY;

-- Policy for selecting role skills (anyone can read)
CREATE POLICY "Anyone can read role skills"
ON role_skills FOR SELECT
USING (true);

-- Policy for inserting role skills (project creators only)
CREATE POLICY "Project creators can insert role skills"
ON role_skills FOR INSERT
TO authenticated
WITH CHECK (
    EXISTS (
        SELECT 1 FROM project_roles
        JOIN projects ON project_roles.project_id = projects.id
        WHERE project_roles.id = role_id
        AND projects.creator_id = auth.uid()
    )
);

-- Policy for deleting role skills (project creators only)
CREATE POLICY "Project creators can delete role skills"
ON role_skills FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM project_roles
        JOIN projects ON project_roles.project_id = projects.id
        WHERE project_roles.id = role_id
        AND projects.creator_id = auth.uid()
    )
);

-- Create RLS policies for role_applications table
ALTER TABLE role_applications ENABLE ROW LEVEL SECURITY;

-- Policy for selecting role applications (project creators and applicants)
CREATE POLICY "Project creators and applicants can read applications"
ON role_applications FOR SELECT
USING (
    auth.uid() = user_id OR
    EXISTS (
        SELECT 1 FROM project_roles
        JOIN projects ON project_roles.project_id = projects.id
        WHERE project_roles.id = role_id
        AND projects.creator_id = auth.uid()
    )
);

-- Policy for inserting role applications (authenticated users)
CREATE POLICY "Authenticated users can apply for roles"
ON role_applications FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Policy for updating role applications (project creators and applicants)
CREATE POLICY "Project creators and applicants can update applications"
ON role_applications FOR UPDATE
TO authenticated
USING (
    auth.uid() = user_id OR
    EXISTS (
        SELECT 1 FROM project_roles
        JOIN projects ON project_roles.project_id = projects.id
        WHERE project_roles.id = role_id
        AND projects.creator_id = auth.uid()
    )
);

-- Policy for deleting role applications (applicants only)
CREATE POLICY "Applicants can delete their applications"
ON role_applications FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Insert sample data for testing
INSERT INTO project_roles (project_id, title, description, time_commitment, location, applicants, filled)
VALUES 
(1, 'Local Project Coordinator', 'Coordinate with village leaders and oversee daily project activities on-site.', '20 hours/week', 'Machakos County, Kenya', 3, false),
(1, 'Water Quality Specialist', 'Test water samples and ensure all systems meet safety standards.', '10 hours/week', 'Remote + Site Visits', 1, false),
(1, 'Community Trainer', 'Train local technicians on pump maintenance and water system management.', '15 hours/week', 'Machakos County, Kenya', 5, true);

-- Insert skills for the roles
INSERT INTO role_skills (role_id, skill)
VALUES 
(1, 'Project Management'),
(1, 'Local Language'),
(1, 'Community Relations'),
(2, 'Water Testing'),
(2, 'Laboratory Analysis'),
(2, 'Report Writing'),
(3, 'Training'),
(3, 'Technical Knowledge'),
(3, 'Communication');
