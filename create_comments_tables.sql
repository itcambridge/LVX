-- Create comments table
CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    likes INTEGER NOT NULL DEFAULT 0,
    
    -- Add indexes for performance
    CONSTRAINT comments_project_id_idx UNIQUE (id, project_id)
);

-- Create comment_likes table to track which users have liked which comments
CREATE TABLE IF NOT EXISTS comment_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    comment_id BIGINT NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    -- Ensure a user can only like a comment once
    CONSTRAINT comment_likes_unique UNIQUE (comment_id, user_id)
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS comments_project_id_created_at_idx ON comments (project_id, created_at DESC);
CREATE INDEX IF NOT EXISTS comment_likes_user_id_idx ON comment_likes (user_id);

-- Create or replace function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_comments_updated_at
BEFORE UPDATE ON comments
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Create RLS policies for comments table
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- Policy for selecting comments (anyone can read)
CREATE POLICY "Anyone can read comments"
ON comments FOR SELECT
USING (true);

-- Policy for inserting comments (authenticated users only)
CREATE POLICY "Authenticated users can insert comments"
ON comments FOR INSERT
TO authenticated
WITH CHECK (true);

-- Policy for updating comments (only the comment author)
CREATE POLICY "Users can update their own comments"
ON comments FOR UPDATE
TO authenticated
USING (auth.uid() = user_id);

-- Policy for deleting comments (only the comment author)
CREATE POLICY "Users can delete their own comments"
ON comments FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Create RLS policies for comment_likes table
ALTER TABLE comment_likes ENABLE ROW LEVEL SECURITY;

-- Policy for selecting comment likes (anyone can read)
CREATE POLICY "Anyone can read comment likes"
ON comment_likes FOR SELECT
USING (true);

-- Policy for inserting comment likes (authenticated users only)
CREATE POLICY "Authenticated users can like comments"
ON comment_likes FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Policy for deleting comment likes (only the user who created the like)
CREATE POLICY "Users can unlike comments they liked"
ON comment_likes FOR DELETE
TO authenticated
USING (auth.uid() = user_id);
